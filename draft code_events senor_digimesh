#include <WaspXBeeDM.h> 
#include <WaspSensorEvent_v20.h>

//Destination MAC Addresses or broadcast mode(more packet loss)
char RX_ADDRESS_MESHLIUM[] = "0013A20041253B09";
char RX_BROADCAST[] = "000000000000FFFF";
char OWN_MAC_ADDRESS[] = "0013A200412539AB"; // can be found on radio module

//Define Waspmote ID of this node put in frame if no other identifier is used
char WASPMOTE_ID[] = "node_03";

//Define network address of the XBee Module
char OWN_NETADDRESS[] = "1213";

//Personal Area Network ID
uint8_t panID[2] = {0x12,0x34};

//define frequency channel
//Digimesh 2.4Ghz: range 0x0B t0 0x1A
//Digimesh 900Mhz: range 0x00 to 0x0B
uint8_t channel = 0x0F;

//mode: 1 (enabled) 0 (disabled)
uint8_t encryptionMode = 0;

//16-byte encryption key
char encryptionKey[] = "WaspmoteLinkKey!";

// Variable to store the read value
float value;


void setup()
{
  // 1. Initialization of the modules  

  // Turn on the USB and print a start message
  USB.ON();
  USB.println(F("start"));

  // Turn on the sensor board
  SensorEventv20.ON();

  // Turn on the RTC
  RTC.ON();

  // Enable interruptions from the board
  SensorEventv20.attachInt();

}


void loop()
{   
  ///////////////////////////////////////
  // 1. Read the sensor voltage output
  ///////////////////////////////////////

  // Read the sensor
  value = SensorEventv20.readValue(SENS_SOCKET8, SENS_FLOW_FS200);

  // Print the flow read value
  USB.print(F("Flow: "));
  USB.print(value);
  USB.println(F("l/min"));



  ///////////////////////////////////////
  // 2. Go to deep sleep mode  
  ///////////////////////////////////////
  USB.println(F("enter deep sleep"));
  PWR.deepSleep("00:00:00:10",RTC_OFFSET,RTC_ALM1_MODE1,SOCKET0_OFF);

  USB.ON();
  USB.println(F("wake up\n"));



  ///////////////////////////////////////
  // 3. Check Interruption Flags
  ///////////////////////////////////////

  // 3.1. Check interruption from Sensor Board
  if(intFlag & SENS_INT)
  {
    interrupt_function();
  }

  // 3.2. Check interruption from RTC alarm
  if( intFlag & RTC_INT )
  {   
    USB.println(F("-----------------------------"));
    USB.println(F("RTC INT captured"));
    USB.println(F("-----------------------------"));

    // clear flag
    intFlag &= ~(RTC_INT);
  }

}








/**********************************************
 *
 * interrupt_function()
 *  
 * Local function to treat the sensor interruption
 *
 *
 ***********************************************/
void interrupt_function()
{
  // Disable interruptions from the board
  SensorEventv20.detachInt();

  // Load the interruption flag
  SensorEventv20.loadInt();
 
  // In case the interruption came from socket 8
  if( SensorEventv20.intFlag & SENS_SOCKET8)
  {
    USB.println(F("-----------------------------"));
    USB.println(F("Interruption from socket 8"));
    USB.println(F("-----------------------------"));
    
    // Read the sensor
    value = SensorEventv20.readValue(SENS_SOCKET8, SENS_FLOW_FS200);

    // Print the flow read value    
    USB.print(F("Flow: "));
    USB.print(value);
    USB.println(F("l/min"));
  }

  // Clean the interruption flag
  intFlag &= ~(SENS_INT);

  // Enable interruptions from the board
  SensorEventv20.attachInt();
