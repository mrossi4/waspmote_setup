// Put your libraries here (#include ...)

#include <WaspXBeeDM.h>
#include <Wasp3G.h>
#include <WaspFrame.h>


//Destination MAC Addresses or broadcast mode(more packet loss)
char RX_ADDRESS_MESHLIUM[] = "0013A20041253B09";
char RX_BROADCAST[] = "000000000000FFFF";
char OWN_MAC_ADDRESS[] = "0013A200412539AB"; // can be found on radio module

//Define Waspmote ID of this node put in frame if no other identifier is used
char WASPMOTE_ID[] = "node_03";

//Define network address of the XBee Module
char OWN_NETADDRESS[] = "1213";

//Personal Area Network ID
uint8_t panID[2] = {0x12,0x34};

//define frequency channel
//Digimesh 2.4Ghz: range 0x0B t0 0x1A
//Digimesh 900Mhz: range 0x00 to 0x0B
uint8_t channel = 0x0F;

//mode: 1 (enabled) 0 (disabled)
uint8_t encryptionMode = 0;

//16-byte encryption key
char encryptionKey[] = "WaspmoteLinkKey!";

int count=0;
int answer=0;
int status_3G;
unsigned long time;

int loopcount;
char* loopcountstr;
char* picture_name;

void setup() {
    // put your setup code here, to run once:

}

xbeeDM.ON();
xbeeDM.ON(SOCKET0);

xbeeDM.ON();
  xbeeDM.setOwnNetAddress(OWN_NETADDRESS);//set individual XBee's Network Address
  //val from 0-7, defines how many times network retries packet sends
  //to ensure delivery-  has random delays included
  xbeeDM.setMeshNetworkRetries(0x01); 
  xbeeDM.setChannel( channel );
  xbeeDM.setPAN( panID );
  xbeeDM.setEncryptionMode( encryptionMode );
  xbeeDM.setLinkKey( encryptionKey );
  xbeeDM.writeValues();
  
USB.ON();
  USB.println(F("Starting"));

  status_3G = _3G.ON();
  if ((status_3G == 1) || (status_3G == -3))
  {

    USB.println(F("3G module ready..."));

    _3G.setTime();

    _3G.setMode(_3G_RF_OFF);
    USB.println(F("RF circuits disabled"));

    // if there isn't a name the 3G module use the date and time for the picture's name
    _3G.pictureName("");

    USB.println(F("*********************************************************************"));
    USB.println(F("Focus scketch 01. This program uses the microSD to focus the lens."));
    USB.println(F("Keys with special functions:"));
    USB.println(F("  'a': IR LEDs off"));
    USB.println(F("  's': IR LED block 1 on, block 2 off"));
    USB.println(F("  'd': IR LED block 2 on, block 1 off"));
    USB.println(F("  'f': all IR LEDs on"));
    USB.println(F("  'q': IR cut filter enabled"));
    USB.println(F("  'w': IR cut filter disabled"));
    USB.println(F("*********************************************************************"));

    while(USB.available() > 0)
    {
      USB.read();    
    }
  }
  else
  {
    USB.println(F("3G module NOT ready..."));
  }
}



void loop() {
    // put your main code here, to run repeatedly:

}

picture_name = loopcountstr+".jpg"; 

 USB.ON();
  USB.OFF();
  
  SD.ON();
  SD.OFF();
  
  RTC.ON();
  RTC.OFF();

if ((status_3G == 1) || (status_3G == -3))
  {
    do{
      USB.println(F("Waiting for SD..."));
        
      time = millis();
      answer = _3G.isSD();
      while ((answer == 0) && ((millis() - time) < 60000))
      {
        answer = _3G.isSD();
        // Condition to avoid an overflow (DO NOT REMOVE)
        if (millis() < time)
        {
          time = millis();	
        }
      }

      if (answer == 1)
      {
        // Selects microSD to store the pictures
        _3G.selectStorage(1);
      }
      else
      {
        // Selects microSD to store the pictures
        _3G.selectStorage(0);   
        USB.println("SD card not available"); 
      }

      // Starts the camera and configures it
      do{
        answer = _3G.startCamera();
        if(answer == -3){
          _3G.stopCamera();   
        }
      }
      while (answer != 1);
      _3G.cameraResolution(5);
      _3G.cameraBrightness(3);

      // take the picture and power off the camera
      do{
        answer = _3G.takePicture();
      }
      while (answer != 1);


      _3G.stopCamera();  

      USB.println(_3G.buffer_3G);
      USB.println(F("Picture ready. Extract the microSD card and check the picture."));
      USB.println(F("If necessary, recalibrate the lens and press any key to take another picture"));
      USB.flush();
      while(USB.available() == 0);

      do{
        answer = USB.read();
        switch (answer)
        {
        case 'a':
          _3G.powerIRLED(0);
          break;
        case 's':
          _3G.powerIRLED(1);
          break;
        case 'd':
          _3G.powerIRLED(2);
          break;
        case 'f':
          _3G.powerIRLED(3);
          break;
        case 'q':
          _3G.selectFilter(0);
          break;
        case 'w':
          _3G.selectFilter(1);
          break;
        }
        delay(100);
      }
      while(USB.available() > 0);

    }
    while(1);   
  }
  else
  {
    USB.println("3G not started");
  }


}

loopcount=loopcount+1;

loopcountstr= to_string(loopcount)

}

xbeeDM.send(RX_ADDRESS_GATEWAY, frame.buffer, frame.length);
    
    //set delay(xxxx) in ms or sleep mode (guides on site) here
    delay(60000); //one minute delay

}



{
// First, goes to the folder with the pictures
_3G.goRoot(1);
_3G.cd(“Pictures”);
// Then, sends PICTURE1.JPG to Meshlium
_3G.sendFiletoMeshlium(“.JPG”, “Picture”, “0013A20041253B09”);
}
